# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CameraStreamTest.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#To do...
# Add opencv stuff (pose detection, drawing on image, etc)
# Add system text under image (connecting camera, values updated, etc)


#credits:
#pyqt, pyqt-tools
#this guy for displaying opencv: https://gist.github.com/docPhil99/ca4da12c9d6f29b9cea137b617c7b8b1
#This article for fixing displaying open:  https://medium.com/@ilias.info.tel/display-opencv-camera-on-a-pyqt-app-4465398546f7


from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtGui import QPixmap, QColor
from PyQt5.QtGui import QImage,QPixmap
from PyQt5.QtCore import QThread,pyqtSignal as Signal,pyqtSlot as Slot
import serial.tools.list_ports
import cv2 as cv
import numpy as np

#Toggle debug here to send debug messages to serial
DEBUG = True


class MyApp(QtWidgets.QMainWindow):
    cameraNum = 0
    runCamera = False

    def __init__(self):
        super().__init__()
        self.setupUi()
        self.show()

    def setupUi(self):

        #Main Window setup
        self.setObjectName("self")
        self.resize(597, 613)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        #Tabs setup
        #---MAIN TAB
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.MainTab = QtWidgets.QWidget()
        self.MainTab.setObjectName("MainTab")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.MainTab)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.splitter = QtWidgets.QSplitter(self.MainTab)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.gridLayoutWidget = QtWidgets.QWidget(self.splitter)
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.gridLayoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.ConnectCameraButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.ConnectCameraButton.setObjectName("ConnectCameraButton")
        self.verticalLayout_3.addWidget(self.ConnectCameraButton)
        self.FireProjectButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.FireProjectButton.setObjectName("FireProjectButton")
        self.verticalLayout_3.addWidget(self.FireProjectButton)
        self.imageLabel = QtWidgets.QLabel(self.splitter)
        self.imageLabel.setObjectName("ImageView")
        self.horizontalLayout.addWidget(self.splitter)


        #---Settings Tab
        self.tabWidget.addTab(self.MainTab, "")
        self.SettingsTab = QtWidgets.QWidget()
        self.SettingsTab.setObjectName("SettingsTab")
        self.gridLayout = QtWidgets.QGridLayout(self.SettingsTab)
        self.gridLayout.setObjectName("gridLayout")
        self.ComPortCombo = QtWidgets.QComboBox(self.SettingsTab)
        self.ComPortCombo.setObjectName("ComPortCombo")
        self.gridLayout.addWidget(self.ComPortCombo, 1, 2, 1, 1)
        self.CameraNumberLabel = QtWidgets.QLabel(self.SettingsTab)
        self.CameraNumberLabel.setObjectName("CameraNumberLabel")
        self.gridLayout.addWidget(self.CameraNumberLabel, 0, 0, 1, 1)
        self.ComPortLabel = QtWidgets.QLabel(self.SettingsTab)
        self.ComPortLabel.setObjectName("ComPortLabel")
        self.gridLayout.addWidget(self.ComPortLabel, 1, 0, 1, 1)
        self.ApplySettings = QtWidgets.QPushButton(self.SettingsTab)
        self.ApplySettings.setObjectName("ApplySettings")
        self.gridLayout.addWidget(self.ApplySettings, 3, 3, 1, 1)
        self.CameraNumberLE = QtWidgets.QLineEdit(self.SettingsTab)
        self.CameraNumberLE.setObjectName("CameraNumberLE")
        self.gridLayout.addWidget(self.CameraNumberLE, 0, 2, 1, 1)
        self.DimensionsLabel = QtWidgets.QLabel(self.SettingsTab)
        self.DimensionsLabel.setObjectName("DimensionsLabel")
        self.gridLayout.addWidget(self.DimensionsLabel, 2, 0, 1, 2)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.ProjectileLengthLE = QtWidgets.QLineEdit(self.SettingsTab)
        self.ProjectileLengthLE.setObjectName("ProjectileLengthLE")
        self.gridLayout_2.addWidget(self.ProjectileLengthLE, 1, 2, 1, 1)
        self.ProjectileTypeCombo = QtWidgets.QComboBox(self.SettingsTab)
        self.ProjectileTypeCombo.setObjectName("ProjectileTypeCombo")
        self.gridLayout_2.addWidget(self.ProjectileTypeCombo, 0, 0, 2, 1)
        self.ProjectileRadiusLE = QtWidgets.QLineEdit(self.SettingsTab)
        self.ProjectileRadiusLE.setObjectName("ProjectileRadiusLE")
        self.gridLayout_2.addWidget(self.ProjectileRadiusLE, 0, 2, 1, 1)
        self.RadiusLabel = QtWidgets.QLabel(self.SettingsTab)
        self.RadiusLabel.setObjectName("RadiusLabel")
        self.gridLayout_2.addWidget(self.RadiusLabel, 0, 1, 1, 1)
        self.LengthLabel = QtWidgets.QLabel(self.SettingsTab)
        self.LengthLabel.setObjectName("LengthLabel")
        self.gridLayout_2.addWidget(self.LengthLabel, 1, 1, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 2, 2, 1, 1)
        self.refreshComButton = QtWidgets.QPushButton(self.SettingsTab)
        self.refreshComButton.setObjectName("Refresh COM Ports")
        self.gridLayout.addWidget(self.refreshComButton, 1, 3, 1, 1)
        self.tabWidget.addTab(self.SettingsTab, "")
        self.verticalLayout_2.addWidget(self.tabWidget)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 597, 26))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        #Set text fields, ect
        self.retranslateUi()
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

        #Signal functions
        self.ConnectCameraButton.clicked.connect(self.toggleCamera)
        self.FireProjectButton.clicked.connect(self.fireProjectButtonFunc)
        self.ApplySettings.clicked.connect(self.applySettingsFunc)
        self.refreshComButton.clicked.connect(self.updateComCombo)

        #setup Combo lists
        self.projectileTypes = ["Cylinder", "Sphere"]
        self.ProjectileTypeCombo.addItems(self.projectileTypes)
        self.updateComCombo()

        #Button / Field variables
        self.cameraConnected = False
        self.projectileFiring = False
        self.COMPORT = ""
        self.projectileRadius = 0
        self.projectileLength = 0
        self.projectileType = "Cylinder"

        #Threading (for camera)
        self.camera_thread = MyThread()
        #Attach signal from camera thread to apps update image function
        self.camera_thread.frame_signal.connect(self.setImage)


        #set blank image 
        self.imageWidth = 640
        self.imageHeight = 480
        grey = QPixmap(self.imageWidth, self.imageHeight)
        grey.fill(QColor('darkGray'))
        # set the image image to the grey pixmap
        self.imageLabel.setPixmap(grey)


    #Func to set texts of all labels, buttons, etc
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "self"))
        self.ConnectCameraButton.setText(_translate("self", "Connect Camera"))
        self.FireProjectButton.setText(_translate("self", "Fire Projectile"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.MainTab), _translate("self", "Main"))
        self.CameraNumberLabel.setText(_translate("self", "Camera Number: "))
        self.ComPortLabel.setText(_translate("self", "System COM Port"))
        self.refreshComButton.setText(_translate("self", "Refresh"))
        self.ApplySettings.setText(_translate("self", "Apply"))
        self.DimensionsLabel.setText(_translate("self", "Dimensions:"))
        self.RadiusLabel.setText(_translate("self", "Radius"))
        self.LengthLabel.setText(_translate("self", "Length"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SettingsTab), _translate("self", "Settings"))


    def toggleCamera(self):        
        if not self.cameraConnected:
            self.cameraConnected = True
            MyApp.runCamera = True
            self.camera_thread.start()
        else:
            self.cameraConnected = False
            MyApp.runCamera = False

    @Slot(QImage)
    def setImage(self,image):
        self.imageLabel.setPixmap(QPixmap.fromImage(image))


    #---------------------BUTTON FUNCTIONS

    def connectCameraButtonFunc(self):
        self.cam = cv.VideoCapture(self.cameraNum)
        print("Connect Camera Button pressed")


    def fireProjectButtonFunc(self):
        print("fire button pressed")


    def updateComCombo(self):
        #get all connected comports
        self.COMPORTS = {}
        comportInfoList = serial.tools.list_ports.comports()
        for comportInfo in comportInfoList:
            self.COMPORTS[comportInfo.description] = comportInfo.name
        #clear existings combo items and add new
        self.ComPortCombo.clear()
        for key,_ in list(self.COMPORTS.items()):
            self.ComPortCombo.addItem(key)


    def applySettingsFunc(self):
        #Get camera Number (only accepts number if entry is all digits)
        holdval = self.CameraNumberLE.text()
        if not any(not char.isdigit() for char in holdval) and len(holdval) > 0:
            MyApp.cameraNum = int(holdval)
        self.CameraNumberLE.clear()
        #Get radius
        holdval = self.ProjectileRadiusLE.text()
        if not any(not char.isdigit() for char in holdval) and len(holdval) > 0:
            self.projectileRadius = int(holdval)
        self.ProjectileRadiusLE.clear()
        #Get length
        holdval = self.ProjectileLengthLE.text()
        if not any(not char.isdigit() for char in holdval) and len(holdval) > 0:
            self.projectileLength = int(holdval)
        self.ProjectileLengthLE.clear()
        #set Projectile Shape
        self.projectileType = self.projectileTypes[self.ProjectileTypeCombo.currentIndex()]
        #Set arduino comport
        self.COMPORT = self.COMPORTS[self.ComPortCombo.currentText()]


        if DEBUG:
            print("Settings:")
            print("Cam Num: " + str(MyApp.cameraNum))
            print("Ard COM: ", self.COMPORT)
            print("Proj Type: " + self.projectileType)
            print("Proj Len: " + str(self.projectileLength))
            print("Proj Rad: " + str(self.projectileRadius))

        
    #Other Functions

    #convert cv image to be readable by qt
    def cvImageToQt(self, image):
        #convert to rgb (cv works in bgr)
        image = cv.cvtColor(image, cv.COLOR_BGR2RGB)
        #image size
        h, w, d = image.shape
        #convert to qtImage type
        image = QtGui.QImage(image.data, w, h, w*d, QtGui.QImage.Format_RGB888)
        #scale image to correct dims and return
        return image.scaled(self.imageWidth, self.imageHeight)


#Class for handling camera operation in alt thread
class MyThread(QThread):
    frame_signal = Signal(QImage)

    def run(self):
        #connect camera
        self.cam = cv.VideoCapture(MyApp.cameraNum)
        #Run camera whilst flag active
        while MyApp.runCamera:
            ret, frame = self.cam.read()
            if not ret:
                MyApp.runCamera = False
                print(f"Failed to read camera Image! ")
                break
            frame = self.cvToLabel(frame)
            #This emits a signal to the application containing the image
            self.frame_signal.emit(frame)
        #upon exit, disconnect camera
        self.cam.release()
    
    #Convert cv np image to qt label image type
    def cvToLabel(self,image):
        image = cv.resize(image, (640,480))
        image = cv.cvtColor(image,cv.COLOR_BGR2RGB)
        image = QImage(image,
                       image.shape[1],
                       image.shape[0],
                       QImage.Format_RGB888)
        return image


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication([])
    ui = MyApp()
    sys.exit(app.exec_())
